# docker-compose.yml - Production simplifiée
version: '3.8'

# Note: Le nom de projet sera défini par COMPOSE_PROJECT_NAME dans .env

services:
  # Application backend
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: compressor-app
    restart: unless-stopped
    ports:
      - "8080:8000"  # Port libre selon votre liste
    environment:
      - NODE_ENV=production
      - PORT=8000
      - REDIS_URL=redis://redis:6379
      - TEMP_DIR=/app/uploads
      - LOG_LEVEL=info
      - CORS_ORIGIN=http://localhost:3001,http://your-domain.com
      - UPLOAD_MAX_SIZE=5368709120
      - WORKER_CONCURRENCY=2
      - FFMPEG_PATH=/usr/bin/ffmpeg
      - FFPROBE_PATH=/usr/bin/ffprobe
      - JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - CLEANUP_INTERVAL=3600
      - FILE_RETENTION=86400
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - compressor
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Worker de traitement
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: compressor-worker
    restart: unless-stopped
    command: npm run worker
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - TEMP_DIR=/app/uploads
      - LOG_LEVEL=info
      - WORKER_CONCURRENCY=2
      - JOB_TIMEOUT=1800
      - FFMPEG_PATH=/usr/bin/ffmpeg
      - FFPROBE_PATH=/usr/bin/ffprobe
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - compressor

  # Redis (interne seulement)
  redis:
    image: redis:7-alpine
    container_name: compressor-redis
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - compressor
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Frontend via Nginx
  frontend:
    image: nginx:alpine
    container_name: compressor-frontend
    restart: unless-stopped
    ports:
      - "3001:80"  # Port libre selon votre liste
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - compressor

volumes:
  uploads:
    driver: local
    driver_opts:
      type: none
      device: ${UPLOADS_PATH:-./uploads}
      o: bind
  
  logs:
    driver: local
    driver_opts:
      type: none
      device: ${LOGS_PATH:-./logs}
      o: bind
  
  redis_data:
    driver: local

networks:
  compressor:
    driver: bridge