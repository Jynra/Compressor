# .env.example - Configuration Compressor S√âCURIS√âE
# Copier ce fichier vers .env et personnaliser les valeurs

# ===========================================
# üóúÔ∏è COMPRESSOR - CONFIGURATION PRODUCTION S√âCURIS√âE
# ===========================================

# ===========================================
# S√âCURIT√â (OBLIGATOIRE √Ä CHANGER EN PRODUCTION)
# ===========================================

# ‚úÖ Secret JWT AUTO-G√âN√âR√â (commande ci-dessous)
# IMPORTANT: Ex√©cutez cette commande pour g√©n√©rer une cl√© s√©curis√©e :
# openssl rand -base64 32
# Ou utilisez : node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
JWT_SECRET=CHANGE_ME_$(openssl rand -base64 32 2>/dev/null || echo "UNSAFE_DEFAULT_KEY")

# ‚úÖ Cl√© API (si authentification activ√©e)
# G√©n√©rez avec : openssl rand -hex 32
API_KEY=

# ‚úÖ Authentification (recommand√© en production)
AUTH_ENABLED=false

# ===========================================
# R√âSEAU ET CORS
# ===========================================

# ‚úÖ Origins autoris√©es (URLs qui peuvent acc√©der √† l'API)
# ‚ö†Ô∏è IMPORTANT: Remplacez localhost par vos vrais domaines en production
CORS_ORIGIN=http://localhost:3001,https://compressor.yourdomain.com

# ‚úÖ Trust proxy (si derri√®re un reverse proxy)
TRUST_PROXY=false

# ===========================================
# STOCKAGE ET FICHIERS
# ===========================================

# ‚úÖ R√©pertoires de stockage (absolus recommand√©s en production)
UPLOADS_PATH=./uploads
LOGS_PATH=./logs

# ‚úÖ Taille maximum des uploads (en bytes)
# 5GB par d√©faut = 5368709120
# 1GB = 1073741824, 2GB = 2147483648
UPLOAD_MAX_SIZE=5368709120

# ‚úÖ Dur√©e de r√©tention des fichiers (en secondes)
# 24h = 86400, 7 jours = 604800, 30 jours = 2592000
FILE_RETENTION=86400

# ‚úÖ Limite de taille par type de fichier (optionnel)
MAX_IMAGE_SIZE=104857600    # 100MB
MAX_VIDEO_SIZE=5368709120   # 5GB
MAX_AUDIO_SIZE=524288000    # 500MB
MAX_DOCUMENT_SIZE=104857600 # 100MB

# ===========================================
# PERFORMANCE ET WORKERS
# ===========================================

# ‚úÖ Nombre de workers de traitement simultan√©
# Recommand√©: nombre de CPU cores (max 8 pour √©viter surcharge)
WORKER_CONCURRENCY=2

# ‚úÖ Nombre de replicas de workers Docker
WORKER_REPLICAS=1

# ‚úÖ Timeout pour les jobs (en secondes)
# 30 minutes = 1800, 1 heure = 3600
JOB_TIMEOUT=1800

# ‚úÖ Limite m√©moire par worker (en MB)
WORKER_MEMORY_LIMIT=2048

# ===========================================
# RATE LIMITING ET S√âCURIT√â
# ===========================================

# ‚úÖ Rate limiting global (requ√™tes par 15 minutes)
RATE_LIMIT=100

# ‚úÖ Rate limiting uploads (uploads par 15 minutes par IP)
UPLOAD_RATE_LIMIT=10

# ‚úÖ Rate limiting downloads (t√©l√©chargements par minute par IP)
DOWNLOAD_RATE_LIMIT=20

# ‚úÖ Skip rate limiting en d√©veloppement
SKIP_RATE_LIMIT=false

# ‚úÖ Limite de taille body HTTP (pour les requ√™tes non-upload)
BODY_LIMIT=10mb

# ===========================================
# NETTOYAGE AUTOMATIQUE
# ===========================================

# ‚úÖ Intervalle de nettoyage automatique (en secondes)
# 1 heure = 3600, 6 heures = 21600, 24 heures = 86400
CLEANUP_INTERVAL=3600

# ‚úÖ Nettoyage agressif (supprime m√™me les fichiers r√©cents si espace faible)
AGGRESSIVE_CLEANUP=false

# ‚úÖ Seuil d'espace disque minimum (en GB) avant nettoyage forc√©
MIN_DISK_SPACE=5

# ===========================================
# MONITORING ET LOGS
# ===========================================

# ‚úÖ Niveau de logs (error, warn, info, http, debug)
LOG_LEVEL=info

# ‚úÖ Format de logs (json pour production, combined pour debug)
LOG_FORMAT=json

# ‚úÖ Rotation des logs
LOG_MAX_SIZE=50m
LOG_MAX_FILES=5

# ‚úÖ M√©triques Prometheus (optionnel)
METRICS_ENABLED=false
METRICS_PORT=9090

# ===========================================
# MONITORING EXTERNE (OPTIONNEL)
# ===========================================

# ‚úÖ Grafana (si monitoring activ√©)
GRAFANA_PASSWORD=admin
GRAFANA_PORT=3000

# ‚úÖ Redis Insight (pour debug Redis)
REDIS_INSIGHT_PORT=8001

# ‚úÖ Sentry pour monitoring erreurs (optionnel)
SENTRY_DSN=

# ===========================================
# DOCKER COMPOSE
# ===========================================

# ‚úÖ Nom du projet Docker Compose
COMPOSE_PROJECT_NAME=compressor

# ‚úÖ Version des images Docker
DOCKER_TAG=latest

# ‚úÖ Restart policy
RESTART_POLICY=unless-stopped

# ===========================================
# CONFIGURATION REDIS
# ===========================================

# ‚úÖ URL Redis (pour connexion externe)
# Format: redis://[password@]host:port[/database]
REDIS_URL=redis://localhost:6379

# ‚úÖ Configuration Redis d√©taill√©e (pour d√©ploiement manuel)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DATABASE=0

# ‚úÖ Pool de connexions Redis
REDIS_MAX_CONNECTIONS=20
REDIS_MIN_CONNECTIONS=5

# ===========================================
# FFMPEG ET TRAITEMENT MULTIM√âDIA
# ===========================================

# ‚úÖ Chemin vers FFmpeg (auto-d√©tect√© si vide)
FFMPEG_PATH=/usr/bin/ffmpeg
FFPROBE_PATH=/usr/bin/ffprobe

# ‚úÖ Qualit√© par d√©faut par type
DEFAULT_IMAGE_QUALITY=80
DEFAULT_VIDEO_CRF=23
DEFAULT_AUDIO_BITRATE=128k

# ‚úÖ Formats de sortie autoris√©s
ALLOWED_IMAGE_FORMATS=jpeg,png,webp,avif
ALLOWED_VIDEO_FORMATS=mp4,webm
ALLOWED_AUDIO_FORMATS=mp3,aac,ogg

# ===========================================
# EXEMPLES DE CONFIGURATION
# ===========================================

# üü¢ D√âVELOPPEMENT LOCAL:
# JWT_SECRET=dev-secret-key-not-for-production
# CORS_ORIGIN=http://localhost:3001,http://localhost:8080
# UPLOADS_PATH=./uploads
# WORKER_CONCURRENCY=1
# FILE_RETENTION=3600
# AUTH_ENABLED=false
# LOG_LEVEL=debug

# üü° STAGING:
# JWT_SECRET=$(openssl rand -base64 32)
# CORS_ORIGIN=https://staging.compressor.com
# UPLOADS_PATH=/opt/compressor-staging/uploads
# WORKER_CONCURRENCY=2
# FILE_RETENTION=86400
# AUTH_ENABLED=true
# LOG_LEVEL=info

# üî¥ PRODUCTION:
# JWT_SECRET=$(openssl rand -base64 32)
# API_KEY=$(openssl rand -hex 32)
# CORS_ORIGIN=https://compressor.yourdomain.com
# UPLOADS_PATH=/data/compressor/uploads
# LOGS_PATH=/var/log/compressor
# WORKER_CONCURRENCY=4
# WORKER_REPLICAS=2
# FILE_RETENTION=604800
# AUTH_ENABLED=true
# RATE_LIMIT=500
# UPLOAD_RATE_LIMIT=50
# LOG_LEVEL=warn
# METRICS_ENABLED=true

# üè¢ SERVEUR D√âDI√â HAUTE PERFORMANCE:
# JWT_SECRET=$(openssl rand -base64 32)
# API_KEY=$(openssl rand -hex 32)
# CORS_ORIGIN=https://files.enterprise.com,https://admin.enterprise.com
# UPLOADS_PATH=/opt/compressor/data
# LOGS_PATH=/var/log/compressor
# WORKER_CONCURRENCY=8
# WORKER_REPLICAS=4
# UPLOAD_MAX_SIZE=10737418240  # 10GB
# RATE_LIMIT=1000
# UPLOAD_RATE_LIMIT=100
# JOB_TIMEOUT=3600
# WORKER_MEMORY_LIMIT=4096

# ===========================================
# VALIDATION ET S√âCURIT√â AVANC√âE
# ===========================================

# ‚úÖ Validation stricte des types MIME
STRICT_MIME_VALIDATION=true

# ‚úÖ V√©rification des magic bytes (signatures de fichier)
MAGIC_BYTES_VALIDATION=true

# ‚úÖ Scan antivirus (si ClamAV install√©)
ANTIVIRUS_ENABLED=false
CLAMAV_HOST=localhost
CLAMAV_PORT=3310

# ‚úÖ Blacklist d'extensions interdites
FORBIDDEN_EXTENSIONS=exe,bat,cmd,scr,pif,com,dll,sh,py,php,asp,jsp

# ‚úÖ Whitelist d'User-Agents autoris√©s (optionnel)
ALLOWED_USER_AGENTS=

# ‚úÖ Limite de requ√™tes par seconde par IP (DDoS protection)
DDOS_PROTECTION=true
MAX_REQUESTS_PER_SECOND=10

# ===========================================
# HTTPS ET TLS (pour d√©ploiement direct)
# ===========================================

# ‚úÖ Activation HTTPS
HTTPS_ENABLED=false

# ‚úÖ Certificats SSL
SSL_KEY_PATH=/etc/ssl/private/compressor.key
SSL_CERT_PATH=/etc/ssl/certs/compressor.crt

# ‚úÖ Redirection HTTP vers HTTPS
FORCE_HTTPS=false

# ===========================================
# BASE DE DONN√âES (pour futures extensions)
# ===========================================

# ‚úÖ PostgreSQL (optionnel pour persistance avanc√©e)
DATABASE_URL=
POSTGRES_HOST=
POSTGRES_PORT=5432
POSTGRES_DB=compressor
POSTGRES_USER=compressor
POSTGRES_PASSWORD=

# ===========================================
# CLOUD STORAGE (pour stockage distant)
# ===========================================

# ‚úÖ AWS S3
AWS_REGION=
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
S3_BUCKET=
S3_ENDPOINT=

# ‚úÖ Google Cloud Storage
GOOGLE_CLOUD_PROJECT=
GOOGLE_CLOUD_KEYFILE=
GCS_BUCKET=

# ‚úÖ Azure Blob Storage
AZURE_STORAGE_ACCOUNT=
AZURE_STORAGE_KEY=
AZURE_CONTAINER=

# ===========================================
# NOTIFICATIONS (optionnel)
# ===========================================

# ‚úÖ Email (pour notifications d'erreurs)
SMTP_HOST=
SMTP_PORT=587
SMTP_USER=
SMTP_PASSWORD=
SMTP_FROM=noreply@compressor.com

# ‚úÖ Slack (pour alertes)
SLACK_WEBHOOK_URL=

# ‚úÖ Discord (pour notifications)
DISCORD_WEBHOOK_URL=

# ===========================================
# NOTES IMPORTANTES DE S√âCURIT√â
# ===========================================

# üîí 1. TOUJOURS g√©n√©rer un JWT_SECRET unique et s√©curis√©
# üîí 2. Configurer CORS_ORIGIN avec vos vrais domaines uniquement
# üîí 3. Activer AUTH_ENABLED=true en production
# üîí 4. Utiliser des chemins absolus pour UPLOADS_PATH et LOGS_PATH
# üîí 5. V√©rifier que les r√©pertoires existent et ont les bonnes permissions
# üîí 6. Ajuster WORKER_CONCURRENCY selon vos ressources CPU
# üîí 7. Surveiller l'espace disque pour UPLOADS_PATH
# üîí 8. Activer HTTPS_ENABLED=true en production
# üîí 9. Ce fichier .env ne doit JAMAIS √™tre commit√© dans Git
# üîí 10. Sauvegarder r√©guli√®rement vos fichiers upload√©s

# ===========================================
# COMMANDES UTILES POUR LA CONFIGURATION
# ===========================================

# G√©n√©rer JWT_SECRET s√©curis√© :
# openssl rand -base64 32

# G√©n√©rer API_KEY s√©curis√© :
# openssl rand -hex 32

# V√©rifier la configuration :
# docker-compose config

# Tester la connectivit√© Redis :
# redis-cli -h localhost -p 6379 ping

# V√©rifier l'espace disque :
# df -h /path/to/uploads

# Tester l'API :
# curl http://localhost:8081/api/health

# Voir les logs en temps r√©el :
# docker-compose logs -f

# Backup des uploads :
# tar -czf backup-$(date +%Y%m%d).tar.gz uploads/